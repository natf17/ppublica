com.ancientdawn.ppublica.validator.CreateWeekScheduleValidator.id.new = New week can't have an id
com.ancientdawn.ppublica.validator.CreateWeekScheduleValidator.week.atLeastOne = Each week must have at least one day
com.ancientdawn.ppublica.validator.CreateWeekScheduleValidator.week.tooMany = A week can't have more than 7 days
com.ancientdawn.ppublica.validator.CreateWeekScheduleValidator.week.day.weekScheduleId = If creating new week, days can't have week id
com.ancientdawn.ppublica.validator.CreateDayValidator.id.new = To create a new day - day can't have id
com.ancientdawn.ppublica.validator.CreateDayValidator.weekScheduleId.mustExist = No week with this weekScheduleId exists
com.ancientdawn.ppublica.validator.CreateDayValidator.weekday.mustExist = To create a new day - day must have a name
com.ancientdawn.ppublica.validator.CreateDayValidator.defaultMaxPublishers.mustExist = To create a new day - day must have defaultMaxPublishers
com.ancientdawn.ppublica.validator.CreateDayValidator.minTime.mustExist = To create a new day - day must have a minTime
com.ancientdawn.ppublica.validator.CreateDayValidator.maxTime.mustExist = To create a new day - day must have a maxTime
com.ancientdawn.ppublica.validator.CreateDayValidator.dayStart.beforeEnd = End time must be after start time
com.ancientdawn.ppublica.validator.CreateDayValidator.duration.mustExist = To create a new day - day must have a default duration for timeSlots
com.ancientdawn.ppublica.validator.CreateDayValidator.maxTime.unevenIntervals = With given start and end times, day can't be split up evenly into slots of given duration
com.ancientdawn.ppublica.validator.CreateDayValidator.cantValidateTimeSlots = Day's startTime, endTime, and Duration must all be valid to continue
com.ancientdawn.ppublica.validator.CreateDayValidator.timeSlots.endTime.invalid = Invalid endTime
com.ancientdawn.ppublica.validator.CreateDayValidator.timeSlots.startTime.invalid = Invalid startTime - timeSlots must start at multiples of day start time and duration
com.ancientdawn.ppublica.validator.CreateDayValidator.weekScheduleId.weekSizeInvalid = Week is full - no more days can be added
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.id.new = To create a new timeSlot - it can't have id
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.dayId.mustHave = To create a new timeSlot - it must have a dayId
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.dayId.mustExist = No day with this dayId exists
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.startTime.mustExist = To create a new timeSlot - it must have startTime
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.maxPublishers.mustExist = To create a new timeSlot - it must specify number of publishers
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.maxPublishers.mustBeGreaterThanOne = To create a new timeSlot - maxPublishers must be greater than 1
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.publishers.mustHave = To create a new timeSlot - it must specify publishers
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.publishers.tooMany = Exceeds max number of publishers
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.publishers.id.required = To create a new timeSlot, all publishers must have id
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.publishers.id.repeated = Duplicate publisher ids found
com.ancientdawn.ppublica.validator.CreateTimeSlotValidator.publishers.id.notFound = Publisher doesn't exist
com.ancientdawn.ppublica.validator.UpdateWeekScheduleValidator.id.missing = A week id must be provided to perform an update
com.ancientdawn.ppublica.validator.UpdateWeekScheduleValidator.weekDoesntExist = This week doesn't exist
com.ancientdawn.ppublica.validator.UpdateWeekScheduleValidator.cantValidateDaysInWeek = Cannot validate days in week provided if week does not exist
com.ancientdawn.ppublica.validator.UpdateWeekScheduleValidator.week.atLeastOne = Each week must have at least one day to update
com.ancientdawn.ppublica.validator.UpdateWeekScheduleValidator.week.tooMany = A week can't have more than 7 days
com.ancientdawn.ppublica.controller.WeekSchedule.Read.NotFound = Week not found
com.ancientdawn.ppublica.controller.WeekSchedule.Publisher.Read.NotFound = There is no publisher with given id
com.ancientdawn.ppublica.validator.CreatePublisherValidator.id.new = To create a new publisher - publisher can't have id
com.ancientdawn.ppublica.validator.CreatePublisherValidator.username.notNull = To create a new publisher - publisher must have a username
com.ancientdawn.ppublica.validator.CreatePublisherValidator.username.mustBeUnique = To create a new publisher - publisher username must be unique
com.ancientdawn.ppublica.validator.CreatePublisherValidator.password.mustExist = To create a new publisher - publisher must have a password
com.ancientdawn.ppublica.validator.CreatePublisherValidator.firstName.mustExist = To create a new publisher - publisher must have a firstName
com.ancientdawn.ppublica.validator.CreatePublisherValidator.lastName.mustExist = To create a new publisher - publisher must have a lastName
com.ancientdawn.ppublica.validator.CreatePublisherValidator.mySlots.cantExist = No timeSlots allowed
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.id.mustHave = To update a timeSlot, it must have an id
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.startTime.mustExist = To update a timeSlot, it must have a startTime
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.maxPublishers.mustExist = To update a timeSlot, it must specify maxPublishers
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.publishers.mustHave = To create a new timeSlot - it must specify publishers
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.publishers.tooMany = Exceeds max number of publishers
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.publishers.id.required = To create a new timeSlot, all publishers must have id
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.publishers.id.repeated = Duplicate publisher ids found
com.ancientdawn.ppublica.validator.UpdateTimeSlotValidator.publishers.id.notFound = Publisher doesn't exist
com.ancientdawn.ppublica.validator.UpdateDayValidator.id.new = Day must have id
com.ancientdawn.ppublica.validator.UpdateDayValidator.id.exists = Day must exist
com.ancientdawn.ppublica.validator.UpdateDayValidator.weekday.mustExist = Must have a weekday
com.ancientdawn.ppublica.validator.UpdateDayValidator.defaultMaxPublishers.mustExist = Day must have defaultMaxPublishers
com.ancientdawn.ppublica.validator.UpdateDayValidator.minTime.mustExist = Must have a minTime
com.ancientdawn.ppublica.validator.UpdateDayValidator.maxTime.mustExist = Must have a maxTime
com.ancientdawn.ppublica.validator.UpdateDayValidator.dayStart.beforeEnd = The minTime must be before maxTime
com.ancientdawn.ppublica.validator.UpdateDayValidator.duration.mustExist = Must have a duration
com.ancientdawn.ppublica.validator.UpdateDayValidator.maxTime.unevenIntervals = With given minTime and maxTime, day can't be split up evenly into slots of given duration
com.ancientdawn.ppublica.validator.UpdateDayValidator.cantValidateTimeSlots = Invalid minTime/maxTime/duration - cannot continue validation
com.ancientdawn.ppublica.validator.UpdateDayValidator.timeSlots.dayId.invalid = TimeSlot's dayId does not match given day's id - either include correct one or leave null
com.ancientdawn.ppublica.validator.UpdateDayValidator.timeSlots.startTime.invalid = timeSlots must start at multiples of day start time and duration / cannot repeat
com.ancientdawn.ppublica.validator.UpdateDayValidator.timeSlots.endTime.invalid = Invalid endTime
com.ancientdawn.ppublica.controller.Day.Read.NotFound = Day not found
com.ancientdawn.ppublica.validator.CreateTimeSlotControllerValidator.dayId.mustExist = This day does not exist
com.ancientdawn.ppublica.validator.CreateTimeSlotControllerValidator.dayId.slotStartTimeInvalidInDay = startTime invalid in Day object, must start at multiples of day start time and duration
com.ancientdawn.ppublica.validator.CreateTimeSlotControllerValidator.dayId.slotStartTimeRepeatedInDay = A timeSlot with this startTime already exists
com.ancientdawn.ppublica.validator.CreateTimeSlotControllerValidator.timeSlots.endTime.invalid = Invalid endTime
com.ancientdawn.ppublica.controller.TimeSlot.Read.NotFound = TimeSlot not found
com.ancientdawn.ppublica.validator.UpdateTimeSlotControllerValidator.dayId.noTimeSlotWithIdInDay = There are no timeSlots with this id in day with given dayId
com.ancientdawn.ppublica.controller.Publisher.Read.NotFound = There is no publisher with given id
com.ancientdawn.ppublica.controller.AssignmentsUtility.Read.NotFound = There is no such assignment
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth = If fields are provided, they must match existing resource
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.cantContinueValidation = Due to previous errors, validation cannot continue
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.weekSameSize = The provided week must have the same number of days as original
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.dayDoesNotMatch = Either dayId or weekDay do not match any existing day
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.identityMismatch = Provided startTime and timeSlot id do not match
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.publisher.onlyAuthIdProvided = Only a publisher's id is allowed for posting from this endpoint
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.publisher.onlyThisPublisherInNewSlot = Only the authenticated publisher's id can be used in new slots
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.nullArgs = Either startTime or id must be provided
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.id.NotFound = Timeslot with this id not found
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.dayId.MustMatch = TimeSlot to be created - its dayId must match the id of the Day it belongs to
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.endTime.MustMatchCalc = TimeSlot to be created - its endTime must match the timeSlot's startTime plus the default duration of the Day
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.maxPublishers.MustMatchDefault = TimeSlot to be created - its maxPublishers must match the day's defaultMaxPublishers
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.dayId.MustMatchRepo = TimeSlot to be updated - if provided, its dayId field must match existing timeSlot's
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.endTime.MustMatchCalc = TimeSlot to be created - if provided, its endTime must equals the startTime plus the days duration. Provided: {0} Calculated:{1}
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.maxPublishers.MustMatchRepo = TimeSlot to be updated - if provided, its maxPublishers field must match existing timeSlot's
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.endTime.MustMatchRepo = TimeSlot to be updated - if provided, its endTime field must match existing timeSlot's
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.publishers.CantBeNull = A timeSlot's publishers cannot be null
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.publishers.MustContainPublisher = A timeSlot must contain authenticated publisher
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.timeSlot.publishers.CannotModifyOtherPublishers = An updated timeSlot cannot modify other publishers
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.New.Publishers.username.Denied = username field restricted
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.New.Publishers.firstName.Denied = firstName field restricted
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.New.Publishers.lastName.Denied = lastName field restricted
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.New.Publishers.Size = TimeSlot to be created - its publisher field must contain 1 publisher
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.fitIntoDay.startTimeNotValid = The Days duration and minTime, maxTime properties do not allow the provided startTime: {0}
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.noRepeatIdsOrStartTimes.id = Provided timeSlots must have unique ids (if provided)
com.ancientdawn.ppublica.validator.UpdateWeekScheduleForPublisherValidator.auth.timeSlot.noRepeatIdsOrStartTimes.startTime = Provided timeSlots must have unique startTimes (if provided)